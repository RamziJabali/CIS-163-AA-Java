[
  {
    "title": "Java Language Concepts(Intro)",
    "description": "OOP concepts in Java are the main ideas behind Java's Object Oriented Programming.",
    "lesson": "\t\tHistory of Java and C++ \n The java programming language is based on the syntax of C and C++ but has a simpler object model. \n  Java is a modern, object-oriented language based on open, public standards.\n Java was originally developed by James Gosling at Sun Microsystems and released in 1995 as a core component of Sun Microsystems'Java platform. \n\t\tOperators in Java \n An operator, in Java, is a special symbols performing specific operations on one, two or three operands and then returning a result. \n The Java operators are classified into eight different categories: assignment, arithmetic, relational, logical, bitwise, compound assignment, conditional and type comparison operators.\n\t\tVariables in Java \n  A variable is a container which holds the value while the java program is executed.\n A variable is assigned with a datatype .A variable is only a name given to a memory location, all the operations done on the variable effects that memory location. \n In Java, all the variables must be declared before use.\n\t\tselection statements.\n The if statement either performs (selects) an action, if a condition is true, or skips it, if the condition is false.\n The if...else statement performs an action if a condition is true and performs a different action if the condition is false.\n The switch statement performs one of many different actions, depending on the value of an expression."
  },
  {
    "title": "Control Structures",
    "description": " Loops are used to repeat a statement or block of statements inside a pair of curly braces.",
    "lesson": "\t\tCounter-controlled repetition\n The count is kept in a variable called an index or counter.\n When the index reaches a certain value (the loop bound) the loop will end.\n Count-controlled repetition is often called definite repetition because the number of repetitions is known before the loop begins executing.\n\t\tFor repetition\n . A for loop is a loop with three parts at the top: a loop variable initialization, a loop expression, and a loop variable update.\n A for loop describes iterating a specific number of times more naturally than a while loop.\n for (initialExpression; conditionExpression; updateExpression) {\n  // Loop body\n}\n // Statements after the loop\n\t\tDo/While Loop\n A while loop is a program construct that repeatedly executes a list of sub-statements (known as the loop body) while the loop's expression evaluates to true.\n Each execution of the loop body is called an iteration.\n Once entering the loop body, execution continues to the body's end, even if the expression would become false midway through.\n A do while loop is a control flow statement that executes a block of code at least once, and then repeatedly executes the block, or not, depending on a given boolean condition at the end of the block.\n do {\n   do_work(); \n} while (condition);\n\t\tBreak & Continue Statements\n The continue statement skips the current iteration of a loop (for, while, and do...while loop).\n When continue statement is executed, control of the program jumps to the end of the loop.\n Then, the test expression that controls the loop is evaluated.\n In case of a for loop, the update statement is executed before the test expression is evaluated.\n The break statement terminates the loop immediately, and the control of the program moves to the next statement following the loop.\n It is almost always used with decision making statements."
  },
  {
    "title": "Methods",
    "description": "A method is a set of code which is referred to by name and can be called (invoked) at any point in a program simply by utilizing the method's name.",
    "lesson": "\t\tWhat are Methods\n A method is a named list of statements.\n A method definition consists of the new method's name and a block of statements.\n Ex: public static void printPizzaArea() { /* block of statements */ }.\n A method call is an invocation of a method's name, causing the method's statements to execute. \nThe method's name can be any valid identifier. A block is a list of statements surrounded by braces.\n\t\tClass Methods in Java\n Class methods are methods that are called on the class itself, not on a specific object instance.\n The static modifier ensures implementation is the same across all class instances.\n\t\tPackages in Java\n These packages consist of a large number of classes which are a part of Java API.\n Some of the commonly used built-in packages are: \n 1) java.lang: Contains language support classes(e.g classed which defines primitive data types, math operations). This package is automatically imported.\n\t\tRecursion vs. Iteration \nBoth recursive and iterative algorithms have their advantages: neither is 'better' in a general sense, it all depends on what sort of problem is to be solved.\n Recursion is best used in places where it cannot be avoided, or it is simply easier to think recursively: these sorts of situations are commonplace in mathematics and some forms of data management (string and list manipulations - something that will be demonstrated later.)\n Recursion has a few downsides though; the computer processes of adding to the method stack and passing parameters takes time, and if the recursion is very long, the method stack may overflow.\n Algorithms which are simple and easy to implement iteratively (and for which the recursive solution is more trouble than they're worth which could be implemented far simpler with a for loop), should be done so.\n An applet is a Java program that runs in a Web browser.\n An applet can be a fully functional Java application because it has the entire Java API at its disposal.\n\t\tIntro to the Applet Class\n An applet is a Java class that extends the java.applet.Applet class.\n A main() method is not invoked on an applet, and an applet class will not define main()."
  },
  {
    "title": "Arrays",
    "description": "An array is a special variable having one name, but storing a list of data items, with each item being directly accessible.",
    "lesson": "\t\tDeclaring and Allocating array\n This is how you can declare an Array: \n			dataType[] arrayName = new dataType[numElements];\n The array declaration uses [ ] symbols after the data type to indicate that the variable is an array reference.\n An array reference variable can refer to arrays of various sizes.\n The new operator creates space in memory to store the array with the specific number of elements.\n The array reference variable is assigned to refer to that newly allocated array.\n\t\tPassing arrays to methods\n You can pass arrays to a method just like normal variables.\n When we pass an array to a method as an argument, actually the address of the array in the memory is passed (reference).\n Therefore, any changes to this array in the method will affect the array. \n Example: \n  public int min(int [] array) { \n 		int min = array[0];\n\t\tSorting arrays\n You can sort arrays using method calls like Arrays.sort( array ); which will sort your array for you from smallest to biggest.\n\t\tSearching Arrays\n The simplest type of search is the sequential search.  In the sequential search, each element of the array is compared to the key, in the order it appears in the array, until the desired element is found.\n If you are looking for an element that is near the front of the array, the sequential search will find it quickly.\n The more data that must be searched, the longer it will take to find the data that matches the key.\n Consider this method which will search for a key integer value. \n If found, the index (subscript) of the first location of the key will be returned.\n If not found, a value of -1 will be returned. \n Example\n public static int search(int [ ] numbers, int key){\n       for (int index = 0; index < numbers.length; index++)\n       {\n           if ( numbers[index] = = key ) \n                 return index;  //We found it!!!\n       }\n     // If we get to the end of the loop, a value has not yet\n     // been returned.  We did not find the key in this array.\n      return -1;\n }\n\t\tMulti Dimension Arrays \n Can be created and Initialized like  int[ ][ ] aryNumbers = new int[6][5]; \n They are set up in the same way as a normal array, except you have two sets of square brackets.\n The first set of square brackets is for the rows and the second set of square brackets is for the columns.\n In the above line of code, we're telling Java to set up an array with 6 rows and 5 columns.\n To hold values in a multi-dimensional array you have to take care to track the rows and columns."
  },
  {
    "title": "Strings and Characters",
    "description": "he String class has many methods to find and retrieve substrings. A variable of char type, as in char myChar;, can store a single character like the letter 'm'.",
    "lesson": "\t\tIntro to Characters and Strings\n Most of the time, if you are using a single character value, you will use the primitive char type.\n   There are times, however, when you need to use a char as an object—for example, as a method argument where an object is expected. \n    The Java programming language provides a wrapper class that 'wraps' the char in a Character object for this purpose.\n An object of type Character contains a single field whose type is char.\n     This Character class also offers a number of useful class (i.e., static) methods for manipulating characters.\n     Strings are a sequence of characters and are widely used in Java programming.\n     In the Java programming language, strings are objects.\n    The String class has over 60 methods and 13 \n\t\tString Constructors\n     Most commonly, you create a string with a statement like String s = 'Hello world!'; rather than using one of the String constructors.\n     In Java, a String object can be created a number of ways. One way is like this: \n  String str1 = new String();\n\t\tString Concatenation\n String concatenation is the process of joining two or more small String to create a big String.\n For example you can create full name by concatenating first and last name of a person.\n Java provides multiple ways to concatenate String, but the easiest of them is by using + operator.\n You can also use the String.concat() function."
  }
]